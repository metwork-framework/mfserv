# automatically generated from https://github.com/metwork-framework/resources/blob/master/cookiecutter/_%7B%7Bcookiecutter.repo%7D%7D/mfxxx_drone.yml template



    
    



    
        
        
    


bootstrap_common: &bootstrap_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - mkdir -p /opt/metwork-mfserv-$${TARGET_DIR}

    - ./bootstrap.sh /opt/metwork-mfserv-$${TARGET_DIR} /opt/metwork-mfext-$${DEP_DIR}

    - cat adm/root.mk
    - env |sort

build_common: &build_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if test "${OS_VERSION}" = "centos6"; then export METWORK_BUILD_OS=generic; else export METWORK_BUILD_OS=${OS_VERSION}; fi

    - if test -d /buildcache; then export BUILDCACHE=/buildcache; fi
    - mkdir -p /opt/metwork-mfserv-$${TARGET_DIR}
    - if test -d /pub; then mkdir -p /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}; fi
    - if test -d /pub; then make >/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1 || ( tail -200 /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log ; exit 1 ) else make; fi
    - OUTPUT=`git status --short`
    - if test "$${OUTPUT}" != ""; then echo "ERROR non empty git status output $${OUTPUT}"; echo "git diff output"; git diff; exit 1; fi
    - MODULEHASH=`/opt/metwork-mfserv-$${TARGET_DIR}/bin/mfserv_wrapper module_hash 2>module_hash.debug` # FIXME: module_hash for addons ?
    - if test -f /opt/metwork-mfserv-$${TARGET_DIR}/.dhash; then cat /opt/metwork-mfserv-$${TARGET_DIR}/.dhash; fi
    - cat module_hash.debug |sort |uniq ; rm -f module_hash.debug
    - echo "$${MODULEHASH}${DRONE_TAG}${DRONE_BRANCH}" |md5sum |cut -d ' ' -f1 >.build_hash
    - if test -f "$${BUILDCACHE}/build_hash_`cat .build_hash`"; then echo "next bypass"; touch .drone_downstream_bypass; exit 0; fi
    - if test -d doc; then if test -d /pub; then make doc >/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make_doc.log 2>&1 || ( tail -200 /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make_doc.log ; exit 1 ) else make doc; fi; fi
    - rm -Rf html_doc
    - if test -d /opt/metwork-mfserv-$${TARGET_DIR}/html_doc; then cp -Rf /opt/metwork-mfserv-$${TARGET_DIR}/html_doc . ; fi
    - if test -d /pub; then make test >/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make_test.log 2>&1 || ( tail -200 /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make_test.log ; exit 1 ) else make test; fi
    - if test -d /pub; then make RELEASE_BUILD=${DRONE_BUILD_NUMBER} rpm >/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make_rpm.log 2>&1 || ( tail -200 /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfserv/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make_rpm.log ; exit 1 ) else make RELEASE_BUILD=${DRONE_BUILD_NUMBER} rpm; fi
    - mv /opt/metwork-mfserv-$${TARGET_DIR}/*.rpm .
  volumes:
    - /pub:/pub
    - /private:/private
    - /buildcache:/buildcache

publish_ci_common: &publish_ci_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if test -d /buildcache; then export BUILDCACHE=/buildcache; fi
    - if test -f .drone_downstream_bypass; then echo "step bypass"; exit 0; fi
    - mkdir -p /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
    - if ! test -L /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/portable; then ln -s centos6 /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/portable; fi
    - cp *.rpm /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
    - createrepo --update /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}
    - rm -Rf /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfserv; mkdir -p /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfserv ; if test -d html_doc; then cp -Rf html_doc/* /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfserv/ ; fi
    - touch "$${BUILDCACHE}/build_hash_`cat .build_hash`"
  volumes:
    - /pub:/pub
    - /private:/private
    - /buildcache:/buildcache

integration_tests_common: &integration_tests_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if test -f .drone_downstream_bypass; then echo "step bypass"; exit 0; fi

    - echo -e "[metwork_$${DEP_BRANCH}]" >/etc/yum.repos.d/metwork.repo
    - echo -e "name=Metwork Continuous Integration Branch $${DEP_BRANCH}" >> /etc/yum.repos.d/metwork.repo
    - echo -e "baseurl=http://metwork-framework.org/pub/metwork/continuous_integration/rpms/$${DEP_BRANCH}/${OS_VERSION}/" >> /etc/yum.repos.d/metwork.repo
    - echo -e "gpgcheck=0\n\enabled=1\n\metadata_expire=0\n" >>/etc/yum.repos.d/metwork.repo
    - yum -y localinstall metwork-mfserv*.rpm
    - yum -y install make
    - su --command="mfserv.init" - mfserv
    - su --command="mfserv.start" - mfserv
    - su --command="mfserv.status" - mfserv
    - if test -d "integration_tests"; then chown -R mfserv integration_tests; cd integration_tests; su --command="cd `pwd`; ./run_integration_tests.sh" - mfserv; cd ..; fi
    - su --command="mfserv.stop" - mfserv


pipeline:
  bootstrap_integration_push:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:integration
    environment:
      - DEP_DIR=master
      - TARGET_DIR=master
    <<: *bootstrap_common
    when:
      event: push
      branch: [ integration, ci_*, pci_* ]

  bootstrap_integration_pr:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:integration
    environment:
      - TARGET_DIR=master
      - DEP_DIR=master
    <<: *bootstrap_common
    when:
      event: pull_request
      branch: integration
  bootstrap_integration_pr_release:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_DIR=${DRONE_BRANCH##release_}
    <<: *bootstrap_common
    when:
      event: pull_request
      branch: [ release_* ]

  bootstrap:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - DEP_DIR=${DRONE_BRANCH##release_}
      - TARGET_DIR=${DRONE_BRANCH##release_}
    <<: *bootstrap_common
    when:
      event: push
      branch: [ master, experimental*, release_* ]
  bootstrap_tag:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - DEP_DIR=${DRONE_BRANCH##release_}
      - TARGET_DIR=${DRONE_BRANCH##release_}
    <<: *bootstrap_common
    when:
      event: tag
      ref: refs/tags/v*


  build_integration_pr:
    <<: *build_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:integration
    environment:
      - TARGET_DIR=master
      - DEP_BRANCH=integration
    when:
      event: pull_request
      branch: [ integration, ci_*, pci_* ]


  build_integration:
    <<: *build_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:integration
    environment:
      - TARGET_DIR=master
      - DEP_BRANCH=integration
    volumes:
      - /pub:/pub
      - /private:/private
      - /buildcache:/buildcache
    when:
      event: push
      branch: [ integration, ci_*, pci_* ]


  build_pr:
    <<: *build_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_BRANCH=${DRONE_BRANCH}
    when:
      event: pull_request
      branch: [ master, experimental*, release_* ]


  build:
    <<: *build_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_BRANCH=${DRONE_BRANCH}
    volumes:
      - /pub:/pub
      - /private:/private
      - /buildcache:/buildcache
    when:
      event: push
      branch: [ master, experimental*, release_* ]

  build_tag:
    <<: *build_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_BRANCH=${DRONE_BRANCH}
    volumes:
      - /pub:/pub
      - /private:/private
      - /buildcache:/buildcache
    when:
      event: tag
      ref: refs/tags/v*

  integration_tests_integration:
    <<: *integration_tests_common
    
    image: metwork/mfxxx-${OS_VERSION}-testimage:integration
    
    environment:
      - DEP_BRANCH=integration
    when:

      event: [push, pull_request]

      branch: [ integration, ci_*, pci_* ]
  integration_tests:
    <<: *integration_tests_common
    
    image: metwork/mfxxx-${OS_VERSION}-testimage:${DRONE_BRANCH}
    
    environment:
      - DEP_BRANCH=${DRONE_BRANCH}
    when:

      event: [push, pull_request]

      branch: [  master, release_*, experimental* ]

  publish_ci_integration:
    <<: *publish_ci_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:integration
    when:
      event: push
      branch: [ integration, pci_* ]
  publish_ci:
    <<: *publish_ci_common
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    when:
      event: push
      branch: [ master, experimental*, release_* ]
  publish_tag:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    volumes:
      - /pub:/pub
      - /private:/private
    commands:
      - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
      - mkdir -p /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION}/
      - if ! test -L /pub/metwork/releases/rpms/${DRONE_BRANCH}/portable; then ln -s centos6 /pub/metwork/releases/rpms/${DRONE_BRANCH}/portable; fi
      - cp *.rpm /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION}/

      - createrepo --update /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION}
      - rm -Rf /pub/metwork/releases/docs/${DRONE_BRANCH}/mfserv; mkdir -p /pub/metwork/releases/docs/${DRONE_BRANCH}/mfserv ; if test -d html_doc; then cp -Rf html_doc/* /pub/metwork/releases/docs/${DRONE_BRANCH}/mfserv/ ; fi
    when:
      event: tag
      ref: refs/tags/v*
  mageia_repo_metadata:
    image: mageia:6
    volumes:
      - /pub:/pub
    commands:
      - if test -f .drone_downstream_bypass; then echo "step bypass"; exit 0; fi
      - cd /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION} && genhdlist2 --allow-empty-media .
    when:
      event: push
      branch: [ master, experimental*, release_*, integration, pci_* ]
  mageia_repo_metadata_tag:
    image: mageia:6
    volumes:
      - /pub:/pub
    commands:
      - cd /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION} && genhdlist2 --allow-empty-media .
    when:
      event: tag
      ref: refs/tags/v*



  trigger_plugins_buildimage:
    image: metwork/drone-downstream-specific-image:latest
    repositories:
      - metwork-framework/docker-mfservplugins-centos7-buildimage@${DRONE_BRANCH}
    secrets: [ downstream_token, downstream_server ]
    when:
      status: [ success ]
      event: push
      branch: [ master, integration, experimental*, release_* ]
      matrix:
        OS_VERSION: centos7


matrix:
  OS_VERSION:
    - centos6


branches: [ master, integration, experimental*, ci_*, pci_*, release_* ]
