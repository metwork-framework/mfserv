{% import 'nginx.macros' as macros with context %}

# General Configuration
daemon off;
worker_processes {{MFSERV_NGINX_WORKERS}};
{% if MFSERV_LOG_MINIMAL_LEVEL == "DEBUG" %}
error_log stderr debug;
{% else %}
error_log stderr error;
{% endif %}
pid        {{MFMODULE_RUNTIME_HOME}}/var/nginx.pid;
{% if MFMODULE_RUNTIME_USER == "root" %}
# this is mainly for CI usage to avoid the use of nobody user
# and corresponding permissions rights
# (you need an explicit METWORK_ALLOW_USAGE_BY_ROOT=1 to see that)
user root;
{% endif %}

# Main Loop Configuration
events {
    worker_connections  40000;
}

{% for item in MFMODULE_ENVIRONMENT %}
env {{item}};
{%- endfor %}

# HTTP Configuration
http {

    include       {{MFMODULE_RUNTIME_HOME}}/tmp/config_auto/mime.types;
    default_type  text/plain;
    # FIXME: ugly hack with ~~~1 and ~~~~2 to circumvent nginxfmt problem with JSON
    log_format main escape=none '~~~1 "@timestamp": "$time_iso8601", "from": "$remote_addr", {% if MFSERV_NGINX_REAL_IP == "1" %}"via": "$realip_remote_addr", {% endif %}"host": "$host", "method": "$request_method", "uri": "$request_uri", "duration": $request_time, "status": $status, "request_length": $request_length, "reply_length": $bytes_sent, "plugin": "$plugin", "request_id": "$proxy_x_request_id"$extra_log_format ~~~2';
    access_log /dev/stdout main;
    {% if MFSERV_NGINX_LOGGING == "1" %}
        {% if MFSERV_ADMIN_HOSTNAME != "null" %}
            {% if MFSERV_ADMIN_SEND_NGINX_LOGS == "1" %}
                access_log syslog:server=127.0.0.1:{{MFSERV_VECTOR_NGINXLOG_PORT}} main;
            {% endif %}
        {% endif %}
    {% else %}
        access_log off;
    {% endif %}
    client_body_temp_path {{MFSERV_NGINX_CLIENTBODY_TEMP_PATH}};
    client_max_body_size {{MFSERV_NGINX_UPLOAD_MAX_BODY_SIZE}}m;
    server_names_hash_bucket_size 1024;
    server_names_hash_max_size 1024;

    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    {% if MFSERV_NGINX_ADD_X_FORWARDED_HEADERS == "1" %}
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
        proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
        proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
        proxy_set_header X-Forwarded-Path $proxy_x_forwarded_path;
    {% endif %}
    {% if MFSERV_NGINX_ADD_REQUEST_ID_HEADER == "1" %}
        proxy_set_header X-Request-Id $proxy_x_request_id;
    {% endif %}
    proxy_read_timeout {{MFSERV_NGINX_TIMEOUT}}s;
    proxy_send_timeout {{MFSERV_NGINX_TIMEOUT}}s;
    proxy_next_upstream off;
    proxy_ignore_client_abort {% if MFSERV_NGINX_PROXY_IGNORE_CLIENT_ABORT == "1" %}on{% else %}off{% endif %};
    proxy_connect_timeout  {{MFSERV_NGINX_TIMEOUT}}s;
    {% if MFSERV_NGINX_ADD_REQUEST_ID_HEADER == "1" %}
    add_header X-Request-Id $proxy_x_request_id; # Return this header to client
    {% endif %}

    {% if MFSERV_NGINX_SERVER_TOKENS == "1" %}
        server_tokens on;
    {% else %}
        server_tokens off;
    {% endif %}

    {% if MFSERV_NGINX_PORT_IN_REDIRECT == "1" %}
        port_in_redirect on;
    {% else %}
        port_in_redirect off;
    {% endif %}

    lua_package_path '{{LUA_PACKAGE_PATH}}';
    lua_code_cache on;

    # Used to dynamically control upstream servers statuses
    # (this is a feature of commercial nginx version emulated in lua here)
    lua_shared_dict peers 10m;
    init_worker_by_lua_block {
        require("resty.core") -- required by lua-resty-limit-traffic (count)
        require("mfserv.init_worker_by_lua")()
        {% for PLUGIN in PLUGINS %}
            {% if PLUGIN.configuration.extra_nginx_init_worker_by_lua_block_string %}
                -- BEGIN OF GENERAL EXTRA init_worker_by_lua_block FOR PLUGIN {{PLUGIN.name}}
                {{PLUGIN.configuration.extra_nginx_init_worker_by_lua_block_string}}
                -- END OF GENERAL EXTRA init_worker_by_lua_block FOR PLUGIN {{PLUGIN.name}}
            {% endif %}
        {% endfor %}
    }

    {% if MFSERV_NGINX_ADD_X_FORWARDED_HEADERS == "1" %}
        # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
        # scheme used to connect to this server
        map $http_x_forwarded_proto $proxy_x_forwarded_proto {
            default $http_x_forwarded_proto;
            ''      $scheme;
        }

        # If we receive X-Forwarded-Path, pass it through; otherwise, pass along the
        # $request_uri requested to this server
        map $http_x_forwarded_path $proxy_x_forwarded_path {
            default $http_x_forwarded_path;
            ''      $request_uri;
        }
    {% endif %}
    {% if MFSERV_NGINX_ACCEPT_INCOMING_REQUEST_ID_HEADER == "1" %}
        # If we receive X-Request-id header, use this value and not
        # a new generated request_id
        map $http_x_request_id $proxy_x_request_id {
            default $http_x_request_id;
            ''      $request_id;
        }
    {% else %}
        # As MFSERV_NGINX_ACCEPT_INCOMING_REQUEST_ID_HEADER == 0,
        # we generate a new request_id for each request
        map $http_x_request_id $proxy_x_request_id {
            default $request_id;
        }
    {% endif %}

    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
    # Connection header that may have been passed to this server
    map $http_upgrade $proxy_connection {
        default upgrade;
        ''      close;
    }

    {% if MFSERV_NGINX_REAL_IP == "1" %}
        # realip feature
        # http://nginx.org/en/docs/http/ngx_http_realip_module.html
        real_ip_header {{MFSERV_NGINX_REAL_IP_HEADER}};
        {% if MFSERV_NGINX_REAL_IP_RECURSIVE == "1" %}
            real_ip_recursive on;
        {% else %}
            real_ip_recursive off;
        {% endif %}
        {% if MFSERV_NGINX_REAL_IP_SET_FROM and MFSERV_NGINX_REAL_IP_SET_FROM != "null" %}
            {% for ADDR in MFSERV_NGINX_REAL_IP_SET_FROM.split(',') %}
                {% if ADDR and ADDR != "null" %}
                    set_real_ip_from {{ADDR}};
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endif %}

    {% for PLUGIN in PLUGINS %}
        {% for APP in PLUGIN.configuration.apps %}
            {% if APP.alias == "no" %}
                {% if APP.unix_sockets and APP.unix_sockets|length > 0 %}
                    upstream {{APP.hash}} {
                        zone upstreams 1000k;
                        least_conn;
                        {% for SOCKET in APP.unix_sockets %}
                        server unix:{{SOCKET}} max_fails=0;{% endfor %}
                    }
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    {% for PLUGIN in PLUGINS %}
        {% if PLUGIN.configuration.extra_nginx_http_conf_string %}
            ##### BEGIN OF GENERAL EXTRA (HTTP) NGINX CONF FOR PLUGIN {{PLUGIN.name}} #####
            {{PLUGIN.configuration.extra_nginx_http_conf_string}}
            ##### END OF GENERAL EXTRA (HTTP) NGINX CONF FOR PLUGIN {{PLUGIN.name}} #####
        {% endif %}
    {% endfor %}

    server {

        {{ macros.common_server(port=MFSERV_NGINX_PORT, ssl_port=MFSERV_NGINX_HTTPS_PORT, extra_listen="default_server", server_name="127.0.0.1") }}

        {% for PLUGIN in PLUGINS %}
            {% if PLUGIN.configuration.extra_nginx_server_conf_string %}
                ##### BEGIN OF GENERAL EXTRA (SERVER) NGINX CONF FOR PLUGIN {{PLUGIN.name}} #####
                {{PLUGIN.configuration.extra_nginx_server_conf_string}}
                ##### END OF GENERAL EXTRA (SERVER) NGINX CONF FOR PLUGIN {{PLUGIN.name}} #####
            {% endif %}
        {% endfor %}

        # Status page for metrics (FIXME: rename this in __status)
        location = /status {
            allow 127.0.0.1/32;
            deny all;
            stub_status on;
            access_log off;
            set $plugin "#monitoring#";
        }

        {% if MFSERV_NGINX_HEALTH_LOCATION != "null" %}
            # healthcheck endpoint for load-balancer
            location = {{MFSERV_NGINX_HEALTH_LOCATION}} {
                {% if MFSERV_NGINX_HEALTH_ACCESS_LOG == "0" %}
                    access_log off;
                {% endif %}
                set $plugin "#monitoring#";
                content_by_lua_block {
                    require("mfserv.health")()
                }
            }
        {% endif %}

        # Monitoring page to show upstream statuses
        # (this is a feature of commercial nginx version emulated in lua here)
        location = /__upstream_status {
            allow 127.0.0.1/32;
            deny all;
            access_log off;
            set $plugin "#monitoring#";
            default_type application/json;
            content_by_lua_block {
                require("mfserv.upstream_status")()
            }
        }

        # Special URL to gracefully shutdown a server inside an upstream group
        # (this is a feature of commercial nginx version emulated in lua here)
        # (the argument after __socket_down is an "urlsafe base64" of the full
        #  unix socket path)
        location ~ ^/__socket_down/(.*)$ {
            allow 127.0.0.1/32;
            deny all;
            access_log off;
            set $plugin "#core#";
            default_type text/plain;
            content_by_lua_block {
                require("mfserv.socket_updown")(ngx.var[1], true)
            }
        }

        # Special URL to start a shutdowned server inside an upstream group
        # (this is a feature of commercial nginx version emulated in lua here)
        # (the argument after __socket_up is an "urlsafe base64" of the full
        #  unix socket path)
        location ~ ^/__socket_up/(.*)$ {
            allow 127.0.0.1/32;
            deny all;
            access_log off;
            set $plugin "#core#";
            default_type text/plain;
            content_by_lua_block {
                require("mfserv.socket_updown")(ngx.var[1], false)
            }
        }

        # Monitoring service to avoid nginx worker zombies
        # FIXME: rename this in __uuid
        location = /uuid {
            allow 127.0.0.1/32;
        {% if MFSERV_NGINX_UUID_ENDPOINT_EXTRA_ALLOWS != "null" -%}
            {% for ALLOW in MFSERV_NGINX_UUID_ENDPOINT_EXTRA_ALLOWS.split(',') %}
                {%- if ALLOW != "" -%}
                    allow {{ALLOW}};
                {% endif %}
            {%- endfor -%}
        {%- endif -%}
            deny all;
            echo "{{UUID}}";
            access_log off;
            set $plugin "#monitoring#";
        }

        {% for PLUGIN in PLUGINS %}
            {% for APP in PLUGIN.configuration.apps %}
                {% if APP.prefix_based_routing %}
                    {% if APP.static_routing %}
                        {% if APP.prefix == "/" and APP.static_url_prefix == "" %}
                            location / {
                        {% else %}
                            # if you don't understand (?:/(.*))?, read https://serverfault.com/a/476368
                            location ~ ^{% if APP.prefix != "/" %}{{APP.prefix}}{% endif %}{{APP.static_url_prefix}}(?:/(.*))?$ {
                        {% endif %}
                            error_page 599 /invalid; # this http code (599) does not exist but we need this line to avoid HTTP/404 capture by welcome plugin (see nginx docs)
                            alias {{APP.workdir}}{{APP.static_directory}}/{% if APP.prefix != "/" or APP.static_url_prefix != "" %}$1{% endif %};
                            set $plugin "{{PLUGIN.name}}";
                            {% if APP.extra_nginx_conf_static_string %}
                                ##### BEGIN OF PLUGIN EXTRA NGINX CONF (STATIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                                {{APP.extra_nginx_conf_static_string}}
                                ##### END OF PLUGIN EXTRA NGINX CONF (STATIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                            {% endif %}
                            {% if MFSERV_ADMIN_HOSTNAME != "null" %}
                                log_by_lua_block {
                                    local stats = require("mfserv.stats")
                                    stats.send_status_code_stat("request_counter", "{{PLUGIN.name}}", "{{APP.name}}", "static")
                                    stats.send_timing_stat("request_timer", "{{PLUGIN.name}}", "{{APP.name}}", "static")
                                }
                            {% endif %}
                        }
                    {% endif %}

                    {% if APP.unix_sockets|length > 0 %}
                        {% if APP.prefix == "/" %}
                            location / {
                        {% else %}
                            # if you don't understand (?:/(.*))?, read https://serverfault.com/a/476368
                            location ~ ^{{APP.prefix}}(?:/(.*))?$ {
                        {% endif %}
                            error_page 599 /invalid; # this http code (599) does not exist but we need this line to avoid HTTP/404 capture by welcome plugin (see nginx docs)
                            set $plugin "{{PLUGIN.name}}";
                            proxy_read_timeout {{APP.timeout}}s;
                            proxy_send_timeout {{APP.timeout}}s;
                            proxy_connect_timeout  {{APP.timeout}}s;
                            proxy_pass http://{{APP.hash}};
                            {% if APP.extra_nginx_conf_string %}
                                ##### BEGIN OF PLUGIN EXTRA NGINX CONF (DYNAMIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                                {{APP.extra_nginx_conf_string}}
                                ##### END OF PLUGIN EXTRA NGINX CONF (DYNAMIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                            {% endif %}
                            {% if MFSERV_ADMIN_HOSTNAME != "null" %}
                                log_by_lua_block {
                                    local stats = require("mfserv.stats")
                                    stats.send_status_code_stat("request_counter", "{{PLUGIN.name}}", "{{APP.name}}", "dynamic")
                                    stats.send_timing_stat("request_timer", "{{PLUGIN.name}}", "{{APP.name}}", "dynamic")
                                }
                            {% endif %}
                        }

                    {% endif %}
                {% endif %}
            {% endfor %}
        {% endfor %}

    }

    {% for PLUGIN in PLUGINS %}
        {% for APP in PLUGIN.configuration.apps %}
            {% if APP.virtualdomain_based_routing and APP.alias == "no" %}
                server {
                    {{ macros.common_server(port=MFSERV_NGINX_PORT, ssl_port=MFSERV_NGINX_HTTPS_PORT, server_name=APP.virtualdomains|join(" "), plugin_name=PLUGIN.name, add_backlog=False) }}
                    {% if APP.extra_nginx_conf_string %}
                        ##### BEGIN OF PLUGIN EXTRA NGINX CONF (DYNAMIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                        {{APP.extra_nginx_conf_string}}
                        ##### END OF PLUGIN EXTRA NGINX CONF (DYNAMIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                    {% endif %}

                    {% if APP.static_routing %}
                        location ~ ^{{APP.static_url_prefix}}(?:/(.*))?$ {
                            {% if APP.extra_nginx_conf_static_string %}
                                ##### BEGIN OF PLUGIN EXTRA NGINX CONF (STATIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                                {{APP.extra_nginx_conf_static_string}}
                                ##### END OF PLUGIN EXTRA NGINX CONF (STATIC) FOR APP {{PLUGIN.name}}/{{APP.name}} #####
                            {% endif %}
                            alias {{APP.workdir}}{{APP.static_directory}}/$1;
                            {% if MFSERV_ADMIN_HOSTNAME != "null" %}
                                log_by_lua_block {
                                    local stats = require("mfserv.stats")
                                    stats.send_status_code_stat("request_counter", "{{PLUGIN.name}}", "{{APP.name}}", "static")
                                    stats.send_timing_stat("request_timer", "{{PLUGIN.name}}", "{{APP.name}}", "static")
                                }
                            {% endif %}
                        }
                    {% endif %}

                    {% if APP.unix_sockets|length > 0 %}
                        location / {
                            {% if APP.timeout != "null" %}
                                proxy_read_timeout {{APP.timeout}}s;
                                proxy_send_timeout {{APP.timeout}}s;
                                proxy_connect_timeout  {{APP.timeout}}s;
                            {% endif %}
                            proxy_pass http://{{APP.hash}};
                            {% if MFSERV_ADMIN_HOSTNAME != "null" %}
                                log_by_lua_block {
                                    local stats = require("mfserv.stats")
                                    stats.send_status_code_stat("request_counter", "{{PLUGIN.name}}", "{{APP.name}}", "dynamic")
                                    stats.send_timing_stat("request_timer", "{{PLUGIN.name}}", "{{APP.name}}", "dynamic")
                                }
                            {% endif %}
                        }
                    {% endif %}
                }

            {% endif %}
        {% endfor %}
    {% endfor %}

}
