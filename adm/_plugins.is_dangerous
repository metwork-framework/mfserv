#!/usr/bin/env python3

import os
import sys
from mfutil.plugins import get_plugin_info
from configparser_extended import ExtendedConfigParser

CONFIG = os.environ.get('MFCONFIG', 'GENERIC')

infos = get_plugin_info(sys.argv[1])
if not infos:
    raise Exception("the plugin %s is not installed" % sys.argv[1])

plugin_home = infos['home']
config_ini = "%s/config.ini" % plugin_home
parser = ExtendedConfigParser(config=CONFIG, strict=False,
                              inheritance='im')
parser.read(config_ini)
dangerous = False
for option in ("extra_nginx_conf_filename",
               "extra_nginx_http_conf_filename",
               "extra_nginx_server_conf_filename",
               "extra_nginx_init_worker_by_lua_block_filename"):
    if parser.has_option("general", option):
        tmp = parser.get("general", option).strip()
        if tmp != "null":
            print("WARNING: this plugin has a general "
                  "extra nginx configuration")
            dangerous = True
            break
app_sections = [x.strip() for x in parser.sections() if x.startswith("app_")]
for app_section in app_sections:
    if parser.has_option(app_section, "debug"):
        tmp = parser.get(app_section, "debug").strip()
        if tmp == "1":
            print("WARNING: this plugin has a debug == 1 setting for the "
                  "app: %s" % app_section.replace("app_", ""))
            dangerous = True
    if not parser.has_option(app_section, "prefix_based_routing_extra_routes"):
        continue
    tmp = parser.get(app_section, "prefix_based_routing_extra_routes").strip()
    if tmp != "null":
        print("WARNING: this plugin has a "
              "prefix_based_routing_extra_routes == %s (!= null) "
              "for the app: %s" % (tmp, app_section.replace("app_", "")))
        dangerous = True
if dangerous:
    print("  => This is a dangerous plugin which can break the whole")
    print("     mfserv module")
    print("  => But it can be assumed if you trust the author")
