###################################
#####                         #####
#####     GENERAL SECTION     #####
#####                         #####
###################################
# (plugin metadatas)
[general]

# Notes about the name of the plugin:
# - the name of the plugin is given by the content of .layerapi2_label
#   in this directory (format: plugin_{name of the plugin}@mfserv)
# - the old "name" key in this file is not used anymore

# Version of the plugin (X.Y.Z)
# If the value is {% raw %}{{MFMODULE_VERSION}}{% endraw %},
# the current module version is used
version={{cookiecutter.version}}

# Summary (one line) of the goal of the plugin
summary={{cookiecutter.one_line_summary}}

# License of the plugin
license={{cookiecutter.license}}

# URL of the plugin homepage
url={{cookiecutter.url}}

# Name of the maintainer of the plugin on the form "Firstname FAMILYNAME <email>"
maintainer={{cookiecutter.maintainer}}

# Vendor of the plugin
vendor={{cookiecutter.vendor}}

{% block extra_nginx_conf_filename %}
# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "http" section
# If you want to include some configuration fragments specific to an app
# don't use this key (in [general] section] but extra_nginx_conf_filename
# in [app_xxxxx] section.
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
# Note: the different between this key and the one just bellow is that
#       the configuration fragment will be inserted in "http" section
#       (for this one) and in "server" section (for the one above)
extra_nginx_http_conf_filename={{extra_nginx_http_conf_filename|default("null", true)}}

# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "server" section
# If you want to include some configuration fragments specific to an app
# don't use this key (in [general] section] but extra_nginx_conf_filename
# in [app_xxxxx] section.
# Note: this key is not used with virtualdomain_based_routing
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
# Note: the different between this key and the one just above is that
#       the configuration fragment will be inserted in "server" section
#       (for this one) and in "http" section (for the one above)
extra_nginx_server_conf_filename={{extra_nginx_server_conf_filename|default("null", true)}}

# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "init_worker_by_lua_block" section
# and must be valid LUA code!
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
extra_nginx_init_worker_by_lua_block_filename={{extra_nginx_init_worker_by_lua_block_filename|default("null", true)}}
{% endblock %}

{% block extra_general %}
{% endblock %}

# Private key to store the file format version
# => THERE IS NO GOOD REASON TO CHANGE THIS VALUE
# So, if you are about to change this value, DON'T DO THIS
__version=1

{% if number_of_apps|default(2) > 0 %}
{% if number_of_apps|default(2) > 1 %}
################################
#####                      #####
#####     APPs SECTION     #####
#####                      #####
################################
# (you can have several section like this one named [app_xxx])
[app_main]
{% else %}
###############################
#####                     #####
#####     APP SECTION     #####
#####                     #####
###############################
# (Note: with this plugin type, you can't have several section like this one)
[app_main]
{% endif %}

{% block app_cmd_and_args %}
# Command to be executed
# notes:
# - null means no command to execute
# - this command can be launched several times (see workers/numprocesses)
# - the command must listen to {unix_socket_path} (dynamically generated)
# - the launched command must run foreground and listen for http requests on
#   {unix_socket_path} unix socket
# - you can use following placeholders:
#   - {unix_socket_path} (full path for a unique dynamically generated unix
#                         socket for the worker)
#   - {timeout} (timout in seconds for dealing with 1 request)
#   - {plugin_name} (plugin name)
#   - {plugin_dir} (plugin directory full path)
#   - {app_name} (app name without app_ prefix)
#   - {debug_extra_options} (the content of debug_extra_options only if debug=1
#                            or empty if debug=0)
cmd_and_args={{cmd_and_args|default("null", true)}}

# Very advanced options, change this only if you exactly know what you are doing
# The previous command is wrapped into a signal_wrapper.py app.
# When we want to do a "really smart" restart, the stop signal is catched by signal_wrapper
# which:
# (1) order to nginx to stop to route new requests to this process
# (2) wait until there is no connection active to the process anymore
#     (the timeout of this way is given by the {timeout} key)
# (3) send {smart_stop_signal} to the configured command ({cmd_and_args})
# (4) wait until {smart_stop_delay} seconds for the configured command to exit
#     (if we exceed the delay, a SIGKILL is sent)
# (5) exit itself
# Then a new process is launched (by circus) and then we wait {smart_start_delay} seconds
# before saying to nginx: "ok you can route new http requests to the new process"
smart_stop_signal={{smart_stop_delay|default('15', true)}}
smart_stop_delay=3
smart_start_delay=3
{% endblock %}

{% block app_workers %}
# number of workers / processes
# note: you can use {% raw %}{{MFCOM_HARDWARE_NUMBER_OF_CPU_CORES_MULTIPLIED_BY_2}}{% endraw %} value
# to avoid a kind of hardware automatic value (see "env |grep HARDWARE" as mfserv
# to find other automatic values)
numprocesses={% raw %}{{MFCOM_HARDWARE_NUMBER_OF_CPU_CORES_MULTIPLIED_BY_2}}{% endraw %}

{% endblock %}

{% block app_timeout %}
# timeout (in seconds) for one request
# (if null or <=0, the MFSERV_NGINX_TIMEOUT is used)
timeout=0

{% endblock %}

{% block app_debug %}
# if you set debug=1, numprocesses will be forced to 1
# and we will try to set all debug options and features
# (max_age will also be forced to 0 and mflog minimal level will be set to
#  DEBUG)
# DON'T USE IT ON PRODUCTION!!!
debug=0

# Options to inject if previous key "debug" it set to 1
# (the placeholder {debug_extra_options} must be used in cmd_and_args key)
# Note: if debug=0, then {debug_extra_options} placeholder is empty even if
# the following key contains something)
debug_extra_options={{debug_extra_options|default("")}}
{% endblock %}

{% block app_xxx_based_routing %}
# Use prefix based routing:
# http://{host}:{port}/{plugin_name}/{app_name}/...
# (and/or)
# http://{host}:{port}/{plugin_name}/... if app_name == main or only one app in the plugin
prefix_based_routing=true

# Use virtualdomain based routing
# http://{app_name}.{plugin_name}.{host}:{port}/...
# (and/or)
# http://{plugin_name}.{host}:{port}/... if app_name == main or only one app in the plugin
# NOTE: you need a DNS "catch all" to do that (like a DNS CNAME *.{host} => {ip_of_the_host}
virtualdomain_based_routing=false
{% endblock %}

{% block app_static_routing %}
# Route directly at the webserver part some /static url part to
# a /static directory inside the application directory (static files hosting)
# (you can configure this feature with static_url_prefix and static_directory
#  key)
static_routing=true

# if static_routing=true, url prefix for static to route static files
# notes :
# - with prefix_based_routing, this is relative to app url prefix
# - the value should start with '/' and must not end with '/'
static_url_prefix=/static

# if static_routing=true, directory prefix for static files
# notes :
# - this is relative to app directory
# - the value should not start with '/' and must not end with '/'
static_directory=/static
{% endblock %}

{% block app_prefix_based_routing_extra_routes %}
# !!! ADVANCED SETTING !!!
# Add extra routes to your plugin (starting by /, not ending by /, separated by ;)
# Example: prefix_based_routing_extra_routes=/foo;/bar
# null => no extra routes
# / => all routes
# Note: if you use this key, you can break the whole mfserv module
#       and generate some conflicts with other plugins
#       => so there will be a warning at plugin installation about that
prefix_based_routing_extra_routes=null
{% endblock %}

{% block app_extra_nginx_conf_filename %}
# !!! ADVANCED SETTING !!!
# use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# the content will be included directly in your app "location" section
# if you want to include some configuration fragments at a more general level
# don't use this key but those in the [general] section
# Note: if you use virtualdomain_based_routing, the content will be included
# in the custom "server" section (specific to your app and not in "location")
extra_nginx_conf_filename=null
{% endblock %}

{% block app_extra_nginx_conf_static_filename %}
# !!! ADVANCED SETTING !!!
# use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# the content will be included directly in your app "location" section for
# the "static" routing part (see also extra_nginx_conf_filename key for
# the "dynamic" part)
# if you want to include some configuration fragments at a more general level
# don't use this key but the one in [general] section)
extra_nginx_conf_static_filename=null
{% endblock %}

{% block app_add_xxx_dir_to_python_path %}
# If true, add plugin directory to python path
add_plugin_dir_to_python_path=true

# If true, add app directory to python path
add_app_dir_to_python_path=false
{% endblock %}

{% block app_rlimits %}
# resource limit for each app worker
# rlimit_as => maximum area (in bytes) of address space which may be taken by the worker.
# rlimit_nofile => maximum number of open file descriptors for the current worker.
# rlimit_stack => maximum size (in bytes) of the call stack for the current worker.
#     This only affects the stack of the main thread in a multi-threaded worker.
# rlimit_core => maximum size (in bytes) of a core file that the current worker can create.
# rlimit_fsize =>  maximum size of a file which the worker may create.
# (empty value means no limit)
rlimit_as = 1000000000
rlimit_nofile = 1000
rlimit_stack = 10000000
rlimit_core = 100000
rlimit_fsize = 100000000
{% endblock %}

{% block app_max_age %}
# If set then the process will be restarted sometime after max_age and
# max_age + random(0, max_age) seconds.
# 0 => disable this feature
# Note: the feature is automatically disabled if workers=1
# Note: 60 seconds is a minimum
max_age = 3600
{% endblock %}

{% block extra_app %}
{% endblock %}

{% endif %}

{% block extra_daemons %}
# !!! ADVANCED SETTINGS !!!
# You can add extra daemons which will be launched within your plugin
# by providing configuration blocks [extra_daemon_*]
# You have to provide a command to daemonize (the command must run in
# foreground and not daemonize by itself)
# [extra_daemon_foo]
# cmd_and_args = /your/foreground/command command_arg1 command_arg2
# numprocesses=1
# graceful_timeout = 30
# rlimit_as = 1000000000
# rlimit_nofile = 1000
# rlimit_stack = 10000000
# rlimit_core = 100000
# rlimit_fsize = 100000000
{% endblock %}

{% block extra %}
{% endblock %}
