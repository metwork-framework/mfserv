#!/usr/bin/env python3

import os
import glob
import envtpl
import hashlib
import copy
from configparser_extended import ExtendedConfigParser
from mflog import get_logger

MODULE_RUNTIME_HOME = os.environ["MODULE_RUNTIME_HOME"]
MFSERV_PLUGINS_HOME = os.path.join(MODULE_RUNTIME_HOME,
                                   "var", "plugins")
MFSERV_NGINX_TIMEOUT = int(os.environ['MFSERV_NGINX_TIMEOUT'])
CONFIG = os.environ.get('MFCONFIG', 'GENERIC')
HOSTNAME = os.environ.get('MFCOM_HOSTNAME')
HOSTNAME_FULL = os.environ.get('MFCOM_HOSTNAME_FULL')

'''
Below are defined process types depending on the code language
'''

# Available types for watching python (i.e gunicorn)
PYTHON_TYP_LIST = [
    "gunicorn3_sync",
    "gunicorn2_sync",
    "gunicorn3_asyncio",
    "python3_sync",
    "aiohttp",
    "python2_sync"
]

GUNICORN_TYP_LIST = [
    "gunicorn3_sync",
    "gunicorn2_sync",
    "gunicorn3_asyncio"
]

# Available types for watching js (i.e node)
JS_TYP_LIST = [
    "node"
]

# Static type plugin
STATIC_TYP_LIST = [
    "static"
]

# All types
ALL_TYP_LIST = \
    PYTHON_TYP_LIST + \
    JS_TYP_LIST + \
    STATIC_TYP_LIST

LOGGER = get_logger("__make_nginx_conf")


def get_conf(plugin_configuration_file):
    plugin_conf = {}
    parser = ExtendedConfigParser(config=CONFIG, strict=False,
                                  inheritance='im', interpolation=None)

    plugin_directory = os.path.dirname(plugin_configuration_file)
    plugin_name = os.path.basename(plugin_directory)
    logger = LOGGER.bind(plugin_name=plugin_name)

    parser.read(plugin_configuration_file)
    apps = [x.replace("app_", "", 1).split(':')[0] for x in parser.sections()
            if x.startswith("app_")]

    extra_general_nginx_conf_string = ""
    if parser.has_option("general", "extra_nginx_conf_filename"):
        extra_general_nginx_conf_filename = \
            parser.get("general", "extra_nginx_conf_filename")
        if extra_general_nginx_conf_filename != "null":
            extra_general_nginx_conf_filepath = \
                os.path.join(plugin_directory,
                             extra_general_nginx_conf_filename)
            with open(extra_general_nginx_conf_filepath, "r") as f:
                extra_general_nginx_conf_string = f.read()

    plugin_conf["name"] = plugin_name
    plugin_conf["extra_general_nginx_conf_string"] = \
        envtpl.render_string(extra_general_nginx_conf_string,
                             extra_variables={"PLUGIN": plugin_conf},
                             keep_multi_blank_lines=False)

    plugin_conf['lua_package_paths'] = []
    plugin_conf["apps"] = []

    for app in apps:
        logger = logger.bind(app=app)
        section = "app_%s" % app
        typ = parser.get(section, "type")
        if typ not in ALL_TYP_LIST:
            continue
        if len(glob.glob(os.path.join(plugin_directory, app, '*.lua'))) > 0:
            lua_package_path = os.path.join(plugin_directory, app, '?.lua')
            plugin_conf['lua_package_paths'].append(lua_package_path)
        extra_nginx_conf_string = ""
        if parser.has_option(section, "extra_nginx_conf_filename"):
            extra_nginx_conf_filename = parser.get(section,
                                                   "extra_nginx_conf_filename")
            if extra_nginx_conf_filename != "null":
                extra_nginx_conf_filepath = \
                    os.path.join(plugin_directory,
                                 extra_nginx_conf_filename)
                with open(extra_nginx_conf_filepath, "r") as f:
                    extra_nginx_conf_string = f.read()
        extra_nginx_conf_static_string = ""
        if parser.has_option(section, "extra_nginx_conf_static_filename"):
            extra_nginx_conf_static_filename = \
                parser.get(section, "extra_nginx_conf_static_filename")
            if extra_nginx_conf_static_filename != "null":
                extra_nginx_conf_static_filepath = \
                    os.path.join(plugin_directory,
                                 extra_nginx_conf_static_filename)
                with open(extra_nginx_conf_static_filepath, "r") as f:
                    extra_nginx_conf_static_string = f.read()
        static_routing = True
        if parser.has_option(section, "static_routing"):
            static_routing = parser.getboolean(section, "static_routing")
        workers = 1
        if parser.has_option(section, "workers"):
            workers = int(envtpl.render_string(parser.get(section, "workers"),
                                               keep_multi_blank_lines=False))
        debug = False
        if parser.has_option(section, "debug"):
            debug = (parser.getint(section, "debug") == 1)
        virtualdomain_based_routing = True
        if parser.has_option(section, "virtualdomain_based_routing"):
            virtualdomain_based_routing = \
                parser.getboolean(section,
                                  "virtualdomain_based_routing")
        prefix_based_routing = True
        if parser.has_option(section, "prefix_based_routing"):
            prefix_based_routing = \
                parser.getboolean(section,
                                  "prefix_based_routing")
        prefix_based_routing_extra_routes = []
        if prefix_based_routing:
            if parser.has_option(section, "prefix_based_routing_extra_routes"):
                tmp = parser.get(section, "prefix_based_routing_extra_routes")
                if tmp.strip() != "null":
                    prefix_based_routing_extra_routes = \
                        [x.strip() for x in tmp.strip().split(';')
                         if x.startswith('/') and not x.endswith('/')]
        workdir = os.path.join(os.environ['MODULE_RUNTIME_HOME'], 'var',
                               'plugins', plugin_name, app)
        timeout = MFSERV_NGINX_TIMEOUT
        if parser.has_option(section, "proxy_timeout"):
            logger.warning("proxy_timeout arg is deprecated, use 'timeout' "
                           "instead")
            if parser.get(section, "proxy_timeout") != "null":
                if parser.getint(section, "timeout") > 0:
                    timeout = parser.getint(section, "proxy_timeout")
        else:
            if parser.has_option(section, "timeout"):
                if parser.get(section, "timeout") != "null":
                    if parser.getint(section, "timeout") > 0:
                        timeout = parser.getint(section, "timeout")
        virtualdomains = set()
        for host in (HOSTNAME, HOSTNAME_FULL, "localhost"):
            virtualdomains.add("%s.%s.%s" % (app, plugin_name, host))
            if app == "main" or len(apps) == 1:
                virtualdomains.add("%s.%s" % (plugin_name, host))
        name = "app_%s_%s" % (plugin_name, app)
        app_conf = {"name": name,
                    "alias": "no",
                    "debug": debug,
                    "app_name": app,
                    "plugin_name": plugin_name,
                    "hash": hashlib.md5(name.encode('utf8')).hexdigest(),
                    "virtualdomain_based_routing": virtualdomain_based_routing,
                    "prefix_based_routing": prefix_based_routing,
                    "prefix": "/%s/%s" % (plugin_name, app),
                    "virtualdomains": sorted(list(virtualdomains)),
                    "workdir": workdir,
                    "timeout": timeout + 2,  # kill the backend first
                    "static_routing": static_routing,
                    "sockets": ["%s/var/default_%s.socket" %
                                (MODULE_RUNTIME_HOME, name)],
                    "type": typ}
        if typ in GUNICORN_TYP_LIST:
            app_conf["sockets"] = ["%s/var/gunicorn_%s.socket" %
                                   (MODULE_RUNTIME_HOME, name)]
        elif typ not in GUNICORN_TYP_LIST:
            if typ == "node":
                sockets = ["%s/var/%s_%s_%i.socket" %
                           (MODULE_RUNTIME_HOME, typ, plugin_name, i + 1)
                           for i in range(0, workers)]
            else:
                sockets = ["%s/var/%s_%s_%s_%i.socket" %
                           (MODULE_RUNTIME_HOME, typ, plugin_name, app, i + 1)
                           for i in range(0, workers)]
            app_conf["sockets"] = sockets
        elif typ in STATIC_TYP_LIST:
            app_conf["sockets"] = None
        app_conf['extra_nginx_conf_string'] = \
            envtpl.render_string(extra_nginx_conf_string,
                                 extra_variables={"APP": app_conf},
                                 keep_multi_blank_lines=False)
        app_conf['extra_nginx_conf_static_string'] = \
            envtpl.render_string(extra_nginx_conf_static_string,
                                 extra_variables={"APP": app_conf},
                                 keep_multi_blank_lines=False)
        plugin_conf["apps"].append(app_conf)
        if app == "main" or len(apps) == 1:
            copy_conf = copy.deepcopy(app_conf)
            copy_conf['prefix'] = "/%s" % plugin_name
            copy_conf['alias'] = "yes"
            plugin_conf["apps"].append(copy_conf)
        for extra_route in prefix_based_routing_extra_routes:
            copy_conf = copy.deepcopy(app_conf)
            copy_conf['prefix'] = extra_route
            copy_conf['alias'] = "yes"
            plugin_conf["apps"].append(copy_conf)
    return plugin_conf


plugins = []
lua_package_paths = []
for config_file in glob.glob(MFSERV_PLUGINS_HOME + "/*/config.ini"):
    plugin_conf = get_conf(config_file)
    lua_package_paths = lua_package_paths + plugin_conf['lua_package_paths']
    plugins.append(plugin_conf)
lua_package_paths = \
    lua_package_paths + ["%s/config/?.lua" % os.environ['MFSERV_HOME'],
                         "%s/lib/?.lua" % os.environ['MFSERV_HOME'],
                         "%s/config/?.lua" % os.environ['MFCOM_HOME'],
                         "%s/lib/?.lua" % os.environ['MFCOM_HOME']]

nginx_conf_file = os.path.join(os.environ['MODULE_HOME'], 'config',
                               'nginx.conf')

# add all MODULE-named environment variables to nginx.conf
list_module_environment = []
module = os.environ['MODULE']
for key in os.environ.keys():
    if key.startswith(module + '_'):
        list_module_environment.append(key)

with open(nginx_conf_file, "r") as f:
    extra_variables = {
        "PLUGINS": plugins,
        "LUA_PACKAGE_PATH": ";".join(lua_package_paths) + ";;",
        "MODULE_ENVIRONMENT": sorted([x for x in os.environ.keys()
                                      if x.startswith("MFSERV_")])
    }
    content = envtpl.render_string(f.read(), extra_variables=extra_variables,
                                   keep_multi_blank_lines=False)

print(content)
